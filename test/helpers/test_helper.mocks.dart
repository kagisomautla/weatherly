// Mocks generated by Mockito 5.4.4 from annotations
// in weatherly/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i14;
import 'dart:typed_data' as _i16;
import 'dart:ui' as _i11;

import 'package:dartz/dartz.dart' as _i2;
import 'package:google_places_flutter/model/prediction.dart' as _i13;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;
import 'package:weatherly/core/error/failure.dart' as _i6;
import 'package:weatherly/domains/repositories/forecast_repository.dart' as _i9;
import 'package:weatherly/domains/repositories/google_place_repository.dart'
    as _i12;
import 'package:weatherly/domains/repositories/weather_repository.dart' as _i4;
import 'package:weatherly/models/Coordinates.dart' as _i8;
import 'package:weatherly/models/Forecast.dart' as _i10;
import 'package:weatherly/models/Weather.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i4.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.WeatherModel>> getCurrentWeatherByCity(
          String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeatherByCity,
          [cityName],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i7.WeatherModel>>.value(
                _FakeEither_0<_i6.Failure, _i7.WeatherModel>(
          this,
          Invocation.method(
            #getCurrentWeatherByCity,
            [cityName],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.WeatherModel>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.WeatherModel>>
      getCurrentWeatherByLocation(_i8.CoordinatesModel? coordinates) =>
          (super.noSuchMethod(
            Invocation.method(
              #getCurrentWeatherByLocation,
              [coordinates],
            ),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.WeatherModel>>.value(
                    _FakeEither_0<_i6.Failure, _i7.WeatherModel>(
              this,
              Invocation.method(
                #getCurrentWeatherByLocation,
                [coordinates],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, _i7.WeatherModel>>);
}

/// A class which mocks [ForecastRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastRepository extends _i1.Mock
    implements _i9.ForecastRepository {
  MockForecastRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<_i2.Either<_i6.Failure, dynamic>> getForecastByCity(
          String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByCity,
          [cityName],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, dynamic>>.value(
            _FakeEither_0<_i6.Failure, dynamic>(
          this,
          Invocation.method(
            #getForecastByCity,
            [cityName],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, dynamic>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, dynamic>> getForecastByLocation(
          _i8.CoordinatesModel? coordinates) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastByLocation,
          [coordinates],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, dynamic>>.value(
            _FakeEither_0<_i6.Failure, dynamic>(
          this,
          Invocation.method(
            #getForecastByLocation,
            [coordinates],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, dynamic>>);

  @override
  _i5.Future<
      _i2.Either<_i6.Failure, List<_i10.ForecastModel>>> formatTo5DayForecast(
          dynamic data) =>
      (super.noSuchMethod(
        Invocation.method(
          #formatTo5DayForecast,
          [data],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i10.ForecastModel>>>.value(
                _FakeEither_0<_i6.Failure, List<_i10.ForecastModel>>(
          this,
          Invocation.method(
            #formatTo5DayForecast,
            [data],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i10.ForecastModel>>>);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GooglePlaceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGooglePlaceRepository extends _i1.Mock
    implements _i12.GooglePlaceRepository {
  MockGooglePlaceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i13.Prediction>>> getPlaceByPlaceID(
          String? placeID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaceByPlaceID,
          [placeID],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i13.Prediction>>>.value(
                _FakeEither_0<_i6.Failure, List<_i13.Prediction>>(
          this,
          Invocation.method(
            #getPlaceByPlaceID,
            [placeID],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i13.Prediction>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i3.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i14.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i16.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
      ) as _i5.Future<_i16.Uint8List>);

  @override
  _i5.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpResponse extends _i1.Mock implements _i3.Response {
  MockHttpResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.Uint8List get bodyBytes => (super.noSuchMethod(
        Invocation.getter(#bodyBytes),
        returnValue: _i16.Uint8List(0),
      ) as _i16.Uint8List);

  @override
  String get body => (super.noSuchMethod(
        Invocation.getter(#body),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#body),
        ),
      ) as String);

  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
      ) as int);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  bool get isRedirect => (super.noSuchMethod(
        Invocation.getter(#isRedirect),
        returnValue: false,
      ) as bool);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
      ) as bool);
}
